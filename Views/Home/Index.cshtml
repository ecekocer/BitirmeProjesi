@{
    ViewData["Title"] = "Ana Sayfa";
}

<!-- Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
<!-- MarkerCluster CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css" />

<style>
    #map {
        height: calc(100vh - 75px);
        width: 100%;
    }

    .popup-content {
        width: 250px;
    }
</style>
<div id="map"></div>

<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
<!-- MarkerCluster JS -->
<script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>

<script>
    var map = L.map('map').setView([38.925533, 34.866287], 7);
    const mapUrl = "https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}"

    L.tileLayer(mapUrl, {
        maxZoom: 18,
        attribution: '&copy; <a href="https://www.opentopomap.org/">OpenTopoMapaaaa</a> contributors'
    }).addTo(map);

    var popupOpen = false;
    var currentPopup = null;
    
    // Haritadaki tüm markerları tutacak bir dizi oluşturalım
    var markers = [];

    function isPointInTurkey(lat, lng) {
        const turkeyBounds = [
            [36.0, 26.0],
            [42.1, 45.0]
        ];
        return lat >= turkeyBounds[0][0] && lat <= turkeyBounds[1][0] &&
            lng >= turkeyBounds[0][1] && lng <= turkeyBounds[1][1];
    }

    map.on('click', function (e) {
        if (popupOpen) {
            map.closePopup();
            popupOpen = false;
            currentPopup = null;
        } else if (isPointInTurkey(e.latlng.lat, e.latlng.lng)) {
            var latlng = e.latlng;
            showPopup(latlng);
        } else {
            alert('Sadece Türkiye sınırları içinde bir nokta seçebilirsiniz.');
        }
    });

    function showPopup(latlng) {
        var popupContent = `
                <div class="popup-content">
                    <h5>Veri Düzenleme</h5>
                    <p>Koordinatlar: ${latlng.lat.toFixed(4)}, ${latlng.lng.toFixed(4)}</p>
                    <form>
                        <div class="form-group">
                            <label for="heavyMetalData">Ağır Metal Verisi:</label>
                            <input type="text" class="form-control" id="heavyMetalData" placeholder="Veri girin">
                        </div>
                        <button type="button" class="btn btn-primary" onclick="saveMarker(${latlng.lat}, ${latlng.lng})">Kaydet</button>
                    </form>
                </div>
            `;

        currentPopup = L.popup()
            .setLatLng(latlng)
            .setContent(popupContent)
            .openOn(map);
        popupOpen = true;
    }

    // Marker cluster group oluşturma kısmını güncelle
    var markerClusterGroup = L.markerClusterGroup({
        maxClusterRadius: 80,
        iconCreateFunction: function(cluster) {
            var childCount = cluster.getChildCount();
            
            // Marker sayısına göre boyut ve renk belirleme
            var size, color;
            
            if (childCount < 10) {
                size = 20;
                color = '#4CAF50'; // Yeşil
            } else if (childCount < 25) {
                size = 30;
                color = '#FFC107'; // Sarı
            } else if (childCount < 50) {
                size = 40;
                color = '#FF9800'; // Turuncu
            } else if (childCount < 100) {
                size = 50;
                color = '#FF5722'; // Turuncu-kırmızı
            } else {
                size = 60;
                color = '#F44336'; // Kırmızı
            }

            return L.divIcon({
                html: '<div style="background-color:' + color + '"><span>' + childCount + '</span></div>',
                className: 'marker-cluster',
                iconSize: new L.Point(size, size)
            });
        }
    });

    // CSS stilini ekle
    var style = document.createElement('style');
    style.textContent = `
        .marker-cluster {
            text-align: center;
        }
        .marker-cluster div {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
            border: 2px solid white;
        }
    `;
    document.head.appendChild(style);

    map.addLayer(markerClusterGroup);

    // markers dizisini güncelleme
    var markers = markerClusterGroup;

    // Basitleştirilmiş createRandomMarkers fonksiyonu
    function createRandomMarkers(count) {
        const turkeyBounds = {
            minLat: 36.0,
            maxLat: 42.1,
            minLng: 26.0,
            maxLng: 45.0
        };

        for (let i = 0; i < count; i++) {
            const lat = Math.random() * (turkeyBounds.maxLat - turkeyBounds.minLat) + turkeyBounds.minLat;
            const lng = Math.random() * (turkeyBounds.maxLng - turkeyBounds.minLng) + turkeyBounds.minLng;
            
            if (isPointInTurkey(lat, lng)) {
                const heavyMetalValue = Math.random() * 100;
                
                const circleMarker = L.circleMarker([lat, lng], {
                    radius: 8,  // Sabit boyut
                    fillColor: '#ff7800',  // Sabit renk
                    color: '#000',
                    weight: 1,
                    opacity: 1,
                    fillOpacity: 0.6  // Sabit opaklık
                });

                circleMarker.bindPopup(`
                    <div class="popup-content">
                        <h6>Ağır Metal Verisi</h6>
                        <p>Değer: ${heavyMetalValue.toFixed(2)}</p>
                        <p>Koordinatlar: ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>
                    </div>
                `);

                markerClusterGroup.addLayer(circleMarker);
            } else {
                i--;
            }
        }
    }

    // Basitleştirilmiş saveMarker fonksiyonu
    function saveMarker(lat, lng) {
        var heavyMetalValue = parseFloat(document.getElementById('heavyMetalData').value);

        if (isNaN(heavyMetalValue)) {
            alert('Lütfen geçerli bir sayısal değer giriniz.');
            return;
        }

        var latlng = L.latLng(lat, lng);

        var circleMarker = L.circleMarker(latlng, {
            radius: 8,  // Sabit boyut
            fillColor: '#ff7800',  // Sabit renk
            color: '#000',
            weight: 1,
            opacity: 1,
            fillOpacity: 0.6  // Sabit opaklık
        });

        circleMarker.bindPopup(`
            <div class="popup-content">
                <h6>Ağır Metal Verisi</h6>
                <p>Değer: ${heavyMetalValue}</p>
                <p>Koordinatlar: ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>
            </div>
        `);

        markerClusterGroup.addLayer(circleMarker);
        map.closePopup();
        popupOpen = false;
        currentPopup = null;
    }

    // Sayfa yüklendiğinde 50 random marker oluştur
    createRandomMarkers(250);
</script>